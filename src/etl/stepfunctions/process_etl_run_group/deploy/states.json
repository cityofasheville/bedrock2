{
  "Comment": "State machine to run a single ETL run group",
  "StartAt": "CheckForRunGroup",
  "States": {
    "CheckForRunGroup": {
      "Comment": "See if rungroup is set",
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.rungroup",
          "IsPresent": true,
          "Next": "Init"
        }
      ],
      "Default": "AddRunGroupFlag"
    },
    "AddRunGroupFlag": {
      "Type": "Pass",
      "Result": "UseCronStrings",
      "ResultPath": "$.rungroup",
      "Next": "Init"
    },
    "Init": {
      "Comment": "Initialize the run map.",
      "Type": "Task",
      "Resource": "${create_etl_run_map_arn}",
      "Parameters": {
        "s3bucket": "managed-data-assets",
        "rungroup.$": "$.rungroup"
      },
      "ResultPath": "$",
      "Next": "Check200"
    },
    "Check200": {
      "Comment": "Make sure there wasn't an error return from create/update_etl_run_map",
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.statusCode",
          "NumericEquals": 200,
          "Next": "RunsetIsGo"
        }
      ],
      "Default": "Failed",
      "OutputPath": "$.body"
    },
    "RunsetIsGo": {
      "Comment": "Check whether there are more parallel sets to do",
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.RunSetIsGo",
          "BooleanEquals": true,
          "Next": "ProcessRunSet"
        }
      ],
      "Default": "EmailResults"
    },
    "UpdateRunMap": {
      "Comment": "Update the run map.",
      "Type": "Task",
      "Resource": "${update_etl_run_map_arn}",
      "Parameters": {
        "state.$": "$"
      },
      "ResultPath": "$",
      "Next": "Check200"
    },
    "Failed": {
      "Type": "Fail",
      "Cause": "Not Hello World"
    },
    "EmailResults": {
      "Comment": "Send Results Email",
      "Type": "Task",
      "Resource": "${etl_email_results_arn}",
      "ResultPath": "$.TaskOutput",
      "Next": "Done"
    },
    "Done": {
      "Type": "Succeed"
    },
    "ProcessRunSet": {
      "Comment": "Process a set of independent ETL jobs in parallel",
      "Type": "Map",
      "MaxConcurrency": 1,
      "InputPath": "$",
      "ItemsPath": "$.runsets[0]",
      "Parameters": {
        "ETLJob.$": "$$.Map.Item.Value",
        "JobIsGo": true
      },
      "Next": "UpdateRunMap",
      "ResultPath": "$.results",
      "Iterator": {
        "StartAt": "ProcessOneETLJob",
        "States": {
          "ProcessOneETLJob": {
            "Comment": "Loop through tasks associated with one ETL job",
            "Type": "Choice",
            "Choices": [
              {
                "Variable": "$.JobIsGo",
                "BooleanEquals": true,
                "Next": "SetupTask"
              }
            ],
            "Default": "TasksDone"
          },
          "SetupTask": {
            "Comment": "Set up the next task.",
            "Type": "Task",
            "Resource": "${setup_etl_job_task_arn}",
            "ResultPath": "$",
            "OutputPath": "$.result",
            "Next": "DoOneTask"
          },
          "DoOneTask": {
            "Type": "Choice",
            "Choices": [
              {
                "Variable": "$.JobType",
                "StringEquals": "sql",
                "Next": "SQLTask"
              },
              {
                "Variable": "$.JobType",
                "StringEquals": "table_copy",
                "Next": "TableCopyTask"
              },
              {
                "Variable": "$.JobType",
                "StringEquals": "sftp",
                "Next": "SFTPTask"
              },
              {
                "Variable": "$.JobType",
                "StringEquals": "encrypt",
                "Next": "EncryptTask"
              },
              {
                "Variable": "$.JobType",
                "StringEquals": "file_copy",
                "Next": "FileCopyTask"
              },
              {
                "Variable": "$.JobType",
                "StringEquals": "run_lambda",
                "Next": "RunLambdaTask"
              }
            ],
            "Default": "UnknownTask"
          },
          "SQLTask": {
            "Comment": "Run SQL Command",
            "Type": "Task",
            "Resource": "${etl_task_sql_arn}",
            "ResultPath": "$.TaskOutput",
            "Next": "CheckTaskStatus",
            "Catch": [
              {
                "ErrorEquals": [
                  "States.TaskFailed"
                ],
                "Next": "CheckTaskStatus",
                "ResultPath": "$.TaskOutput"
              }
            ]
          },
          "TableCopyTask": {
            "Comment": "Copy Table",
            "Type": "Task",
            "Resource": "${etl_task_table_copy_arn}",
            "ResultPath": "$.TaskOutput",
            "Next": "CheckTaskStatus",
            "Catch": [
              {
                "ErrorEquals": [
                  "States.TaskFailed"
                ],
                "Next": "CheckTaskStatus",
                "ResultPath": "$.TaskOutput"
              }
            ]
          },
          "SFTPTask": {
            "Comment": "Copy SFTP files",
            "Type": "Task",
            "Resource": "${etl_task_sftp_arn}",
            "ResultPath": "$.TaskOutput",
            "Next": "CheckTaskStatus",
            "Catch": [
              {
                "ErrorEquals": [
                  "States.TaskFailed"
                ],
                "Next": "CheckTaskStatus",
                "ResultPath": "$.TaskOutput"
              }
            ]
          },
          "EncryptTask": {
            "Comment": "Encrypt S3 file with PGP",
            "Type": "Task",
            "Resource": "${etl_task_encrypt_arn}",
            "ResultPath": "$.TaskOutput",
            "Next": "CheckTaskStatus",
            "Catch": [
              {
                "ErrorEquals": [
                  "States.TaskFailed"
                ],
                "Next": "CheckTaskStatus",
                "ResultPath": "$.TaskOutput"
              }
            ]
          },
          "FileCopyTask": {
            "Comment": "Copy Files",
            "Type": "Task",
            "Resource": "${etl_task_file_copy_arn}",
            "ResultPath": "$.TaskOutput",
            "Next": "CheckTaskStatus",
            "Catch": [
              {
                "ErrorEquals": [
                  "States.TaskFailed"
                ],
                "Next": "CheckTaskStatus",
                "ResultPath": "$.TaskOutput"
              }
            ]
          },
          "RunLambdaTask": {
            "Comment": "Run outside Lambda",
            "Type": "Task",
            "Resource": "${etl_task_run_lambda_arn}",
            "ResultPath": "$.TaskOutput",
            "Next": "CheckTaskStatus",
            "Catch": [
              {
                "ErrorEquals": [
                  "States.TaskFailed"
                ],
                "Next": "CheckTaskStatus",
                "ResultPath": "$.TaskOutput"
              }
            ]
          },
          "UnknownTask": {
            "Comment": "Unknown task type.",
            "Type": "Task",
            "Resource": "${etl_task_unknown_arn}",
            "ResultPath": "$.TaskOutput",
            "Next": "CheckTaskStatus",
            "Catch": [
              {
                "ErrorEquals": [
                  "States.TaskFailed"
                ],
                "Next": "CheckTaskStatus",
                "ResultPath": "$.TaskOutput"
              }
            ]
          },
          "CheckTaskStatus": {
            "Comment": "Check the status of the last task.",
            "Type": "Task",
            "Resource": "${check_etl_job_task_status_arn}",
            "Parameters": {
              "input.$": "$"
            },
            "ResultPath": "$",
            "OutputPath": "$.body",
            "Next": "ProcessOneETLJob"
          },
          "TasksDone": {
            "Type": "Pass",
            "End": true,
            "ResultPath": "$.results"
          }
        }
      }
    }
  }
}