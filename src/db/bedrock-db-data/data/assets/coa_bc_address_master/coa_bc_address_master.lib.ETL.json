{
  "asset_name": "coa_bc_address_master.lib",
  "asset_id": "105e9dc2dde2d0a924e5",
  "run_group_id": "7d27de8121bfc20e543b",
  "active": true,
  "tasks": [
    {
      "task_id": "6ce1bb417b461007f3ec",
      "asset_id": "105e9dc2dde2d0a924e5",
      "seq_number": 0,
      "description": null,
      "type": "sql",
      "active": true,
      "source": null,
      "target": {
        "connection": "pubrecdb1/mdastore1/dbadmin"
      },
      "configuration": "truncate internal.coa_bc_address_master;\n\ninsert into internal.coa_bc_address_master (\n  objectid,\n  civicaddress_id,\n  address_x,\n  address_y,\n  address_full,\n  longitude_wgs,\n  latitude_wgs,\n  address_number,\n  address_unit,\n  unit_type,\n  address_street_prefix,\n  address_street_name,\n  address_street_type,\n  address_street_postdirection,\n  address_city,\n  address_commcode,\n  address_zipcode,\n  location_type,\n  address_change_date,\n  maximo_type,\n  maximo_seq_num,\n  asset_code,\n  jurisdiction_type,\n  centerline_id,\n  location_id,\n  parent_location_id,\n  property_pinnum,\n  property_pin,\n  property_pinext,\n  property_nmptype,\n  property_oldpinnum,\n  property_update_date,\n  property_update_reason,\n  property_deeddate,\n  property_taxyear,\n  property_deedurl,\n  property_platurl,\n  property_propcardurl,\n  property_acreage,\n  property_class,\n  property_improved,\n  property_exempt,\n  property_priced,\n  property_totalmarketvalue,\n  property_appraisedvalue,\n  property_taxvalue,\n  property_landuse,\n  property_neighborhoodcode,\n  property_landvalue,\n  property_buildingvalue,\n  property_improvementvalue,\n  property_appraisalarea,\n  property_condounit,\n  property_condobuilding,\n  property_subname,\n  property_sublot,\n  property_subblock,\n  property_subsect,\n  property_township,\n  property_stamps,\n  property_instrument,\n  property_firedistrict,\n  property_schooldistrict,\n  owner_name,\n  owner_house_number,\n  owner_number_suffix,\n  owner_direction,\n  owner_street_name,\n  owner_street_type,\n  owner_careof,\n  owner_address,\n  owner_cityname,\n  owner_state,\n  owner_zipcode,\n  owner_account_number,\n  shape\n)\n  SELECT DISTINCT\n        address_locations.objectid,\n        address_locations.civicaddress_id,\n        address_locations.address_x,\n        address_locations.address_y,\n        address_locations.address_full,\n        ST_X(ST_TRANSFORM(address_locations.shape,4326)) AS longitude_wgs,\n        ST_Y(ST_TRANSFORM(address_locations.shape,4326)) AS latitude_wgs,\n        address_locations.address_number,\n        address_locations.address_unit,\n        address_locations.unit_type,\n        address_locations.address_street_prefix,\n        address_locations.address_street_name,\n        address_locations.address_street_type,\n        address_locations.address_street_postdirection,\n        internal.coa_zip_code.po_name as address_city,\n        address_locations.address_commcode,\n        address_locations.address_zipcode,\n        address_locations.location_type,\n        address_locations.address_change_date,\n        'ADDR'::text as maximo_type,\n        address_locations.civicaddress_id::int as maximo_seq_num,\n        ('ADDR' || address_locations.civicaddress_id::int ) as asset_code,\n        CASE\n                WHEN active_jurisdictions.jurisdiction_type IS NULL\n                THEN 'Buncombe County'\n                ELSE active_jurisdictions.jurisdiction_type\n        END,\n        address_locations.centerline_id::bigint as centerline_id,\n        address_locations.location_id as location_id,\n        address_locations.parent_location_id as parent_location_id,\n        internal.bc_property.pinnum as property_pinnum,\n        internal.bc_property.pin as property_pin,\n        internal.bc_property.pinext as property_pinext,\n        internal.bc_property.nmptype as property_nmptype,\n        internal.bc_property.oldpinnum as property_oldpinnum,\n        internal.bc_property.updatedate as property_update_date,\n        internal.bc_property.reason as property_update_reason,\n        internal.bc_property.deeddate as property_deeddate,\n        internal.bc_property.taxyear as property_taxyear,\n        internal.bc_property.deedurl as property_deedurl,\n        internal.bc_property.platurl as property_platurl,\n        internal.bc_property.propcard as property_propcardurl,\n        internal.bc_property.acreage as property_acreage,\n        internal.bc_property.class as property_class,\n        internal.bc_property.improved as property_improved,\n        internal.bc_property.exempt as property_exempt,\n        internal.bc_property.priced as property_priced,\n        internal.bc_property.totalmarketvalue as property_totalmarketvalue,\n        internal.bc_property.appraisedvalue as property_appraisedvalue,\n        internal.bc_property.taxvalue as property_taxvalue,\n        internal.bc_property.landuse as property_landuse,\n        internal.bc_property.neighborhoodcode as property_neighborhoodcode,\n        internal.bc_property.landvalue as property_landvalue,\n        internal.bc_property.buildingvalue as property_buildingvalue,\n        internal.bc_property.improvementvalue as property_improvementvalue,\n        internal.bc_property.appraisalarea as property_appraisalarea,\n        internal.bc_property.condounit as property_condounit,\n        internal.bc_property.condobuilding as property_condobuilding,\n        internal.bc_property.subname as property_subname,\n        internal.bc_property.sublot as property_sublot,\n        internal.bc_property.subblock as property_subblock,\n        internal.bc_property.subsect as property_subsect,\n        internal.bc_property.township as property_township,\n        internal.bc_property.stamps as property_stamps,\n        internal.bc_property.instrument as property_instrument,\n        internal.bc_property.firedistrict as property_firedistrict,\n        internal.bc_property.schooldistrict as property_schooldistrict,\n        internal.bc_property_pinnum_formatted_owner_names.formatted_owner_name as owner_name,\n        internal.bc_property.housenumber as owner_house_number,\n        internal.bc_property.numbersuffix as owner_number_suffix,\n        internal.bc_property.direction as owner_direction,\n        internal.bc_property.streetname as owner_street_name,\n        internal.bc_property.streettype as owner_street_type,\n        internal.bc_property.careof as owner_careof,\n        internal.bc_property.address as owner_address,\n        internal.bc_property.cityname as owner_cityname,\n        internal.bc_property.state as owner_state,\n        internal.bc_property.zipcode as owner_zipcode,\n        internal.bc_property.accountnumber as owner_account_number,\n        address_locations.shape\nFROM\n--Address attributes and the locations\n(\n        -- Combine the bc_civic_address_table atrribute data with address locations stored in bc_location\n        SELECT DISTINCT\n                row_number() over () as objectid,\n                internal.bc_civicaddress_table.civicaddress_id::int as civicaddress_id,\n                internal.bc_location.x_coord as address_x,\n                internal.bc_location.y_coord as address_y,\n                internal.bc_location.locationtype as location_type,\n                internal.bc_civicaddress_table.full_civic_address as address_full,\n                internal.bc_civicaddress_table.street_number as address_number,\n                internal.bc_civicaddress_table.unit as address_unit,\n                internal.bc_civicaddress_table.unit_type as unit_type,\n                internal.bc_civicaddress_table.street_prefix as address_street_prefix,\n                internal.bc_civicaddress_table.street_name as address_street_name,\n                internal.bc_civicaddress_table.street_type as address_street_type,\n                internal.bc_civicaddress_table.street_postdirection as address_street_postdirection,\n                internal.bc_civicaddress_table.commcode as address_commcode,\n                internal.bc_civicaddress_table.postal_code as address_zipcode,\n                internal.bc_civicaddress_table.change_date as address_change_date,\n                internal.bc_location.centerline_id::bigint as centerline_id,\n                internal.bc_civicaddress_table.location_id as location_id,\n                CASE\n                        WHEN internal.bc_location.parent_location_id = 0\n                        THEN NULL\n                        ELSE internal.bc_location.parent_location_id\n                END,\n                internal.bc_civicaddress_table.pinext as pinext,\n                internal.bc_location.shape as shape\n        FROM\n                internal.bc_civicaddress_table\n        LEFT JOIN\n                internal.bc_location\n        ON\n                internal.bc_civicaddress_table.location_id = internal.bc_location.location_id\n        WHERE internal.bc_civicaddress_table.civicaddress_id != 0\n) as address_locations\n-- Get the pin from bc_property spatially if an address location is contained by the property boundary.\n-- (The parcel_id field in bc_location should be the same is the pin in bc_property, but is not consistent, \n-- so we need to use the pin from bc_property instead. )\n-- 5/20/2018: adding the row_number() bit to pick only the first, if there are multiple matches. Due to an\n-- error at the County, there were a couple properties overlapping other properties. Note that there WILL\n-- be multiple matches in the below BECAUSE of the row_number() - all matches with same pin, different pinext.\n-- To test whether there are actual errors, delete the row_number() and see if there are distinct pins for the\n-- same location_id (this is a validation test in the bc_property MDA).\nLEFT JOIN\n(\n        SELECT location_id, pin, rn from (\n                SELECT DISTINCT\n                        internal.bc_location.location_id,\n                        internal.bc_property.pin,\n                        row_number() over (partition by location_id ORDER BY pin) as rn\n                FROM\n                        internal.bc_location\n                LEFT JOIN\n                        internal.bc_property\n                ON\n                        st_contains(internal.bc_property.shape,internal.bc_location.shape)\n        ) AS tmp WHERE rn = 1\n) as property_location -- 133258 rows retrieved, 102508 distinct pins\nON\n        address_locations.location_id = property_location.location_id\n-- Get property attributes: Use the pin and pinext join bc_property to the address locations\nLEFT JOIN\n        internal.bc_property\nON\n        property_location.pin = bc_property.pin\n        AND\n        address_locations.pinext = bc_property.pinext\n-- Get the property owners name with proper formatting: Use the pin and pinext join bc_property_pinnum_formatted_owner_names to the address locations\nLEFT JOIN\n        internal.bc_property_pinnum_formatted_owner_names\nON\n        property_location.pin ||  address_locations.pinext = internal.bc_property_pinnum_formatted_owner_names.pinnum\n-- Get the address city name from the zip code table\nLEFT JOIN\n        internal.coa_zip_code\nON\n        address_locations.address_zipcode = internal.coa_zip_code.zip::int\n-- Get jurisdication information for an address location\n-- (See CASE statement in SELECT statement above for more details.)\nLEFT JOIN\n(\n        SELECT DISTINCT\n                internal.bc_location.location_id,\n                internal.coa_active_jurisdictions.jurisdiction_type\n        FROM\n                internal.bc_location\n        LEFT JOIN\n                internal.coa_active_jurisdictions\n        ON\n                st_contains(internal.coa_active_jurisdictions.shape,internal.bc_location.shape)\n) as active_jurisdictions\nON\n        address_locations.location_id = active_jurisdictions.location_id\norder by objectid asc;\n"
    },
    {
      "task_id": "d8225336b059ae64ac29",
      "asset_id": "105e9dc2dde2d0a924e5",
      "seq_number": 1,
      "description": null,
      "type": "sql",
      "active": true,
      "source": null,
      "target": {
        "connection": "pubrecdb1/mdastore1/dbadmin"
      },
      "configuration": "-- Update mrc and water_district\nUPDATE internal.coa_bc_address_master\nSET \n\tmrc = water_districts.mrc,\n\twater_district = water_districts.mrc\nFROM (\n\tSELECT DISTINCT\n\t\tinternal.bc_location.location_id, \n\t\tinternal.coa_districts_water.mrc\n\tFROM\n\t\tinternal.bc_location\n\tLEFT JOIN \n\t\tinternal.coa_districts_water\n\tON\n\t\tst_contains(internal.coa_districts_water.shape,internal.bc_location.shape)\n) AS water_districts \nWHERE internal.coa_bc_address_master.location_id = water_districts.location_id;\n"
    },
    {
      "task_id": "7817e5fb86297338971f",
      "asset_id": "105e9dc2dde2d0a924e5",
      "seq_number": 2,
      "description": null,
      "type": "sql",
      "active": true,
      "source": null,
      "target": {
        "connection": "pubrecdb1/mdastore1/dbadmin"
      },
      "configuration": "-- Update trash pickup day\nUPDATE internal.coa_bc_address_master\nSET \n trash_pickup_day = public_works_districts.truckday,\n recycling_pickup_district = public_works_districts.recdistrict,\n recycling_pickup_day = public_works_districts.recday,\n brushweek = public_works_districts.brushweek\n FROM (\n    SELECT DISTINCT\n      internal.bc_location.location_id, \n      pw.truckday,\n      pw.recdistrict,\n      pw.recday,\n      CASE\n        WHEN pw.brushweek LIKE 'opposite%' AND pw.recdistrict = 'A' THEN 'B'\n        WHEN pw.brushweek LIKE 'opposite%' AND pw.recdistrict = 'B' THEN 'A'\n        WHEN pw.brushweek IS NULL THEN NULL\n        ELSE pw.recdistrict\n      END as brushweek\n    FROM\n      internal.bc_location\n    LEFT JOIN \n      internal.coa_districts_public_works as pw\n    ON\n      st_contains(pw.shape,internal.bc_location.shape)\n  ) as public_works_districts \nWHERE internal.coa_bc_address_master.location_id = public_works_districts.location_id;\n\n"
    },
    {
      "task_id": "bc6ac6c5ca3fb0ba7359",
      "asset_id": "105e9dc2dde2d0a924e5",
      "seq_number": 3,
      "description": null,
      "type": "sql",
      "active": true,
      "source": null,
      "target": {
        "connection": "pubrecdb1/mdastore1/dbadmin"
      },
      "configuration": "-- Update river district\nUPDATE internal.coa_bc_address_master\nSET \n  river_district = riverupdate.river_district\nFROM (\n  select \n    pin,\n    river_district\n  from (\n    select distinct\n              prop.pin,\n              case\n                when districts = 'RIVER' THEN 'Yes'\n                else 'No'\n              end as river_district\n            from internal.bc_property prop\n            left join (\n              select districts, shape as rshape\n              from internal.coa_districts_zoning\n              where districts = 'RIVER'\n            ) as river\n            on (st_intersects(river.rshape, prop.shape))\n  ) as a\n) as riverupdate\nwhere internal.coa_bc_address_master.property_pin = riverupdate.pin;\n"
    },
    {
      "task_id": "ae3917885c71ad3a4157",
      "asset_id": "105e9dc2dde2d0a924e5",
      "seq_number": 4,
      "description": null,
      "type": "sql",
      "active": true,
      "source": null,
      "target": {
        "connection": "pubrecdb1/mdastore1/dbadmin"
      },
      "configuration": "-- Update zoning in coa_bc_address_master2\nUPDATE internal.coa_bc_address_master\nSET zoning = zoningupdate.zoning_district,\n\tzoning_links = zoningupdate.zoning_links\nFROM (\n\tSELECT \n  internal.coa_bc_address_master.civicaddress_id,\n  internal.coa_bc_address_master.property_pinnum,\n  CASE\n    WHEN zoning_districts.zoning_district IS NULL\n    THEN 'No Zoning'\n    ELSE zoning_districts.zoning_district\n  end,\n  zoning_districts.zoning_links\n\tFROM internal.coa_bc_address_master\n\tLEFT JOIN (\n\t\tSELECT bc_property.pinnum, \n\t\tstring_agg(coa_districts_zoning.districts || \n\t\t\tCASE coa_districts_zoning.type \n\t\t\tWHEN 'CZ' THEN ' CZ' \n\t\t\tWHEN 'CUP' THEN ' CUP' \n\t\t\tELSE '' END , ','  \n\t\t\torder by coa_districts_zoning.districts) as zoning_district,\n\t\tstring_agg(coa_districts_zoning.hyperlink, ','  \n\t\t\torder by coa_districts_zoning.districts) as zoning_links\t\n\t\tFROM internal.bc_property, internal.coa_districts_zoning\n\t\tWHERE st_intersects(internal.coa_districts_zoning.shape,internal.bc_property.shape)\n\t\tGROUP BY internal.bc_property.pinnum\n\t) as zoning_districts\n\tON\n\t\tinternal.coa_bc_address_master.property_pinnum = zoning_districts.pinnum\n ) as zoningupdate\n where internal.coa_bc_address_master.civicaddress_id = zoningupdate.civicaddress_id;\n"
    },
    {
      "task_id": "bae0e7bca7edaaaced8c",
      "asset_id": "105e9dc2dde2d0a924e5",
      "seq_number": 5,
      "description": null,
      "type": "sql",
      "active": true,
      "source": null,
      "target": {
        "connection": "pubrecdb1/mdastore1/dbadmin"
      },
      "configuration": "-- Update neighborhood\nUPDATE internal.coa_bc_address_master\nSET \n  nbrhd_id = nbrhoods.nbrhd_id,\n  nbrhd_name = nbrhoods.name\nFROM (\n    select distinct\n              n.nbhd_id as nbrhd_id,\n              n.name,\n              a.civicaddress_id\n            from internal.coa_bc_address_master as a\n            LEFT OUTER JOIN internal.coa_asheville_neighborhoods n\n            on (st_contains(n.shape, a.shape))\n) as nbrhoods\nwhere internal.coa_bc_address_master.civicaddress_id = nbrhoods.civicaddress_id;\n"
    },
    {
      "task_id": "f7d18c350c3eb0663bf3",
      "asset_id": "105e9dc2dde2d0a924e5",
      "seq_number": 6,
      "description": null,
      "type": "sql",
      "active": true,
      "source": null,
      "target": {
        "connection": "pubrecdb1/mdastore1/dbadmin"
      },
      "configuration": "-- Update historic district and local landmark status\nUPDATE internal.coa_bc_address_master\nSET \n  historic_district = h.historic_district,\n  local_landmark = h.local_landmark\nFROM (\n    select distinct\n              a.civicaddress_id,\n              hist.historic_district_name as historic_district,\n              land.ll_name as local_landmark\n            from internal.coa_bc_address_master as a\n            LEFT OUTER JOIN internal.coa_local_historic_landmarks as land\n            on (a.property_pinnum = land.new_pin)\n            LEFT OUTER JOIN internal.coa_overlay_historic_districts_property_view as hist\n            on (a.property_pinnum = hist.pinnum)\n) as h\nwhere internal.coa_bc_address_master.civicaddress_id = h.civicaddress_id;\n"
    },
    {
      "task_id": "619eb73cf2514d317503",
      "asset_id": "105e9dc2dde2d0a924e5",
      "seq_number": 7,
      "description": null,
      "type": "sql",
      "active": true,
      "source": null,
      "target": {
        "connection": "pubrecdb1/mdastore1/dbadmin"
      },
      "configuration": "-- Update block_groups\nUPDATE internal.coa_bc_address_master\nSET block_group = clim.geo_id\nFROM internal.coa_climate_justice_by_address clim\nwhere internal.coa_bc_address_master.civicaddress_id = clim.civicaddress_id;\n"
    },
    {
      "task_id": "8d0b78d33a97af130481",
      "asset_id": "105e9dc2dde2d0a924e5",
      "seq_number": 8,
      "description": null,
      "type": "sql",
      "active": true,
      "source": null,
      "target": {
        "connection": "pubrecdb1/mdastore1/dbadmin"
      },
      "configuration": "-- Update climate_justice_score\nUPDATE internal.coa_bc_address_master\nSET climate_justice_score = clim.sum_scores\nFROM internal.coa_climate_justice_index clim\nwhere internal.coa_bc_address_master.block_group = clim.geoid;\n"
    }
  ]
}